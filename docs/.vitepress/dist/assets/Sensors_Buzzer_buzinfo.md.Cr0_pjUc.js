import{_ as r,C as o,c as l,o as n,j as t,G as s,ae as u,a as i,w as d}from"./chunks/framework.BtEkjhVd.js";const c="/assets/zumbador.Ce0R9YA-.png",C=JSON.parse('{"title":"Buzzer","description":"","frontmatter":{},"headers":[],"relativePath":"Sensors/Buzzer/buzinfo.md","filePath":"Sensors/Buzzer/buzinfo.md"}'),b={name:"Sensors/Buzzer/buzinfo.md"};function p(h,e,g,z,f,m){const a=o("center");return n(),l("div",null,[e[1]||(e[1]=t("h1",{id:"buzzer",tabindex:"-1"},[i("Buzzer "),t("a",{class:"header-anchor",href:"#buzzer","aria-label":'Permalink to "Buzzer"'},"​")],-1)),e[2]||(e[2]=t("h2",{id:"overview",tabindex:"-1"},[i("Overview "),t("a",{class:"header-anchor",href:"#overview","aria-label":'Permalink to "Overview"'},"​")],-1)),e[3]||(e[3]=t("p",null,"The AlphaBot V2 includes a passive buzzer, which is a simple audio output device that can generate tones, beeps, and melodies when controlled by a microcontroller (like Arduino or Raspberry Pi). ",-1)),s(a,null,{default:d(()=>e[0]||(e[0]=[t("img",{src:c,width:"500",height:"700"},null,-1)])),_:1,__:[0]}),e[4]||(e[4]=u('<h2 id="key-feature" tabindex="-1">Key Feature <a class="header-anchor" href="#key-feature" aria-label="Permalink to &quot;Key Feature&quot;">​</a></h2><ul><li><strong>Passive Buzzer (Requires External Signal)</strong><ul><li>Unlike an active buzzer (which has an internal oscillator and produces sound with just a DC voltage), a passive buzzer needs a PWM (Pulse Width Modulation) signal to generate different tones.</li><li>This allows for variable frequency control, enabling musical notes and custom sound effects. Connected to a Digital/PWM</li></ul></li><li><strong>Connected to a Digital/PWM Pin</strong><ul><li>Typically wired to a PWM-capable pin.</li></ul></li><li><strong>Common Uses in Robotics</strong><ul><li>Alerts &amp; Notifications (e.g., obstacle detection, low battery).</li><li>Simple Melodies (e.g., startup sound, error beeps).</li><li>User Feedback (e.g., button press confirmation).</li></ul></li></ul><h2 id="working" tabindex="-1">Working <a class="header-anchor" href="#working" aria-label="Permalink to &quot;Working&quot;">​</a></h2><ul><li><strong>PCF8574 I/O Expander</strong><ul><li>The PCF8574 is an 8-bit I/O expander that communicates via I²C (Arduino’s Wire library).</li></ul></li><li><strong>Buzzer Control Logic</strong><ul><li>The buzzer is controlled by bit manipulation of the PCF8574&#39;s output register.</li><li>beep_on → Sets a specific bit (0xDF mask) to activate the buzzer.</li><li>beep_off → Clears the bit (0x20 mask) to deactivate the buzzer.</li></ul></li><li><strong>PCF8574Write(byte data)</strong><ul><li>Sends a byte (data) to the PCF8574 to update its output pins.</li></ul></li><li><strong>PCF8574Read()</strong><ul><li>Reads the current state of the PCF8574&#39;s input/output pins. Returns a byte representing the pin states.</li></ul></li><li><strong>beep_on = PCF8574Write(0xDF &amp; PCF8574Read())</strong><ul><li>Masks the current state with 0xDF (binary 11011111), clearing the buzzer-control bit.</li></ul></li><li><strong>beep_off = PCF8574Write(0x20 | PCF8574Read())</strong><ul><li>Masks the current state with 0x20 (binary 00100000), setting the buzzer-control bit.</li></ul></li></ul>',4))])}const _=r(b,[["render",p]]);export{C as __pageData,_ as default};
