import{_ as n,c as s,o as p,ae as e}from"./chunks/framework.BayG9xQ8.js";const m=JSON.parse('{"title":"Simple Activities","description":"","frontmatter":{},"headers":[],"relativePath":"Sensors/wheels/rect.md","filePath":"Sensors/wheels/rect.md"}'),l={name:"Sensors/wheels/rect.md"};function i(t,a,o,c,r,d){return p(),s("div",null,a[0]||(a[0]=[e(`<h1 id="simple-activities" tabindex="-1">Simple Activities <a class="header-anchor" href="#simple-activities" aria-label="Permalink to &quot;Simple Activities&quot;">â€‹</a></h1><ul><li>To develop a motion control algorithm that allows the robot to execute dynamic manoeuvres such as forward movement, turning left or right, and stopping.</li></ul><h3 id="basic-movements-of-the-alphabot" tabindex="-1">Basic Movements Of The Alphabot <a class="header-anchor" href="#basic-movements-of-the-alphabot" aria-label="Permalink to &quot;Basic Movements Of The Alphabot&quot;">â€‹</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#define PWMA 6</span><span> // Motor Speed L</span></span>
<span class="line"><span>#define PWMB 5</span><span> // Motor Speed R</span></span>
<span class="line"><span>#define AIN2 A0</span><span> // L - Forward</span></span>
<span class="line"><span>#define AIN1 A1</span><span> // L - Backward</span></span>
<span class="line"><span>#define BIN1 A2</span><span> // R - Backward</span></span>
<span class="line"><span>#define BIN2 A3</span><span> // R - Forward</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void setup() {</span></span>
<span class="line"><span>  pinMode(PWMA,OUTPUT);</span></span>
<span class="line"><span>  pinMode(AIN2,OUTPUT);      </span></span>
<span class="line"><span>  pinMode(AIN1,OUTPUT);</span></span>
<span class="line"><span>  pinMode(PWMB,OUTPUT);       </span></span>
<span class="line"><span>  pinMode(AIN1,OUTPUT);     </span></span>
<span class="line"><span>  pinMode(AIN2,OUTPUT);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void moveFront(){</span></span>
<span class="line"><span>  analogWrite(PWMA , 250);</span></span>
<span class="line"><span>  analogWrite(PWMB , 250);</span></span>
<span class="line"><span>  digitalWrite(AIN2 , HIGH);</span></span>
<span class="line"><span>  digitalWrite(BIN2 , HIGH);</span></span>
<span class="line"><span>  delay(2000); </span></span>
<span class="line"><span>  analogWrite(PWMA , 0);</span></span>
<span class="line"><span>  analogWrite(PWMB , 0);</span></span>
<span class="line"><span>  delay(2000); </span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void moveLeft(){</span></span>
<span class="line"><span>  analogWrite(PWMB , 250);</span></span>
<span class="line"><span>  digitalWrite(BIN2 , HIGH);</span></span>
<span class="line"><span>  delay(2000);</span></span>
<span class="line"><span>  analogWrite(PWMB , 0);</span></span>
<span class="line"><span>  digitalWrite(BIN2 , LOW);</span></span>
<span class="line"><span>  delay(2000);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void moveRight(){</span></span>
<span class="line"><span>  analogWrite(PWMA , 250);</span></span>
<span class="line"><span>  digitalWrite(AIN2 , HIGH);</span></span>
<span class="line"><span>  delay(2000);</span></span>
<span class="line"><span>  analogWrite(PWMA , 0);</span></span>
<span class="line"><span>  digitalWrite(AIN2 , LOW);</span></span>
<span class="line"><span>  delay(2000);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void moveBack(){</span></span>
<span class="line"><span>  analogWrite(PWMA , 250);</span></span>
<span class="line"><span>  analogWrite(PWMB , 250);</span></span>
<span class="line"><span>  digitalWrite(AIN1 , HIGH);</span></span>
<span class="line"><span>  digitalWrite(BIN1 , HIGH);</span></span>
<span class="line"><span>  delay(2000); </span></span>
<span class="line"><span>  analogWrite(PWMA , 0);</span></span>
<span class="line"><span>  analogWrite(PWMB , 0);</span></span>
<span class="line"><span>  digitalWrite(AIN1 , LOW);</span></span>
<span class="line"><span>  digitalWrite(BIN1 , LOW);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void loop() {</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  moveFront();</span></span>
<span class="line"><span>  moveLeft();</span></span>
<span class="line"><span>  moveRight();</span></span>
<span class="line"><span>  moveBack();</span></span>
<span class="line"><span>  delay(1000);</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">â€‹</a></h2><ul><li>The robot will move forward for 2 seconds, turn left for 2 seconds, turn right for 2 seconds, move backward for 2 seconds, and repeat.</li></ul><h2 id="exercise-ðŸ¤–" tabindex="-1">Exercise ðŸ¤– <a class="header-anchor" href="#exercise-ðŸ¤–" aria-label="Permalink to &quot;Exercise ðŸ¤–&quot;">â€‹</a></h2><ul><li>Try to make the robot move in a square motion. </li><li>Try to make the robot move in a circular motion. </li></ul>`,8)]))}const W=n(l,[["render",i]]);export{m as __pageData,W as default};
